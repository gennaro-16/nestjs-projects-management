generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Year {
  Y1CP  @map("1cp")
  Y2CSP @map("2csp")
  Y1CS  @map("1cs")
  Y2CS  @map("2cs")
  Y3CS  @map("3cs")
}




model User {
  id                 String           @id @default(uuid())
  email              String           @unique
  password           String
  firstName          String
  lastName           String
  year               Year? 
  phoneNumber        String?          @unique
  profilePicture     String?
  bio                String?
  website            String?
  
  role               Role             @default(MEMBER)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  verified           Boolean          @default(false)
  verificationToken  String?
  announcements      Announcement[]
  notifications      Notification[]
  supervisedProjects Project[]        @relation("ProjectEncadrants")
  juryProjects       Project[]        @relation("ProjectJury")
  memberProjects     Project[]        @relation("ProjectMembers")
  ownedProjects      Project[]        @relation("ProjectOwners")
  reviewedProjects   Project[]        @relation("ProjectScientificReviewers")
  jurySoutenances    Soutenance[]     @relation("SoutenanceJuryMembers")
  soutenances        Soutenance[]     @relation("UserSoutenances")
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  id                   String           @id @default(uuid())
  name                 String
  industry             String
  about                String
  problem              String
  solution             String
 
  targetAudience       String
  competitiveAdvantage String
  motivation           String
  status               ProjectStatus    @default(PENDING)
  stage                ProjectStage     @default(IDEA)
  createdAt            DateTime         @default(now())
  approvals            ApprovalStatus[]
  notifications        Notification[]
  soutenance           Soutenance?      @relation("ProjectSoutenance")
  encadrants           User[]           @relation("ProjectEncadrants")
  juryMembers          User[]           @relation("ProjectJury")
  members              User[]           @relation("ProjectMembers")
  owners               User[]           @relation("ProjectOwners")
  scientificReviewers  User[]           @relation("ProjectScientificReviewers")
  staticModules        StaticModule[] 
  modules              Module[]
  sessions             Session[]
}

model Module {
  id               String   @id @default(uuid())
  name             String   // Name of the module (like 'Mathematics', 'Science', etc.)
  progressPercentage Float   // Progress percentage of the module
  projectId        String   // Foreign key to link the module to a project
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  project          Project  @relation(fields: [projectId], references: [id])
}
model Workshop {
  id          String       @id @default(uuid()) // Unique identifier
  title       String @unique // Workshop title
  description String // Workshop description
  date        DateTime // Date of the workshop
  time        String // Time of the workshop in string format
  type        WorkshopType // Workshop type: on-site or online
  location    String? // Physical location (optional if online)
  onlineLink  String? // Online link (optional if on-site)
  mentor       String // mentor full name
  createdAt DateTime @default(now()) // Automatically tracks creation time
  updatedAt DateTime @updatedAt // Automatically updates when modified
}

enum WorkshopType {
  ON_SITE
  ONLINE
}


model ApprovalStatus {
  id           String        @id @default(uuid())
  projectId    String
  approvedById String?
  status       ProjectStatus
  createdAt    DateTime      @default(now())
  token        String? 
  project      Project       @relation(fields: [projectId], references: [id])
}

model Soutenance {
  id          String   @id @default(uuid())
  projectId   String   @unique
  scheduledAt DateTime
  decision    String?
  createdAt   DateTime @default(now())
  project     Project  @relation("ProjectSoutenance", fields: [projectId], references: [id])
  juryMembers User[]   @relation("SoutenanceJuryMembers")
  users       User[]   @relation("UserSoutenances")
}




model Notification {
  id               String           @id @default(uuid())
  message          String
  notificationType NotificationType
  userId           String
  projectId        String?
  isRead           Boolean          @default(false)
  response         String?
  createdAt        DateTime         @default(now())
  project          Project?         @relation(fields: [projectId], references: [id])
  user             User             @relation(fields: [userId], references: [id])
}

model StaticModule {
  id          String   @id @default(uuid())
  name        String
  percentage  Int      @default(0)
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, projectId])
}

enum Role {
  ADMIN
  STAGE_SERVICE
  PROJECT_OWNER
  COMMITTEE_MEMBER
  JURY_MEMBER
  SUPERVISOR
  MEMBER
  LEADER
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProjectStage {
  IDEA
  PROTOTYPE
  LAUNCHED
  SCALING
}

enum NotificationType {
  INVITATION
  APPROVAL_REQUEST
  GENERAL
}

model Session {
  id        String   @id @default(uuid())
  date      DateTime
  summary   String   // Feedback/summary of the meeting
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
